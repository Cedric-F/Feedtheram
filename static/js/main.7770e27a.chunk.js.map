{"version":3,"sources":["Components/Form.js","Components/Character.js","Components/Nav.js","Components/App.js","serviceWorker.js","index.js"],"names":["Form","button","onClick","this","props","click","className","loader","type","min","max","onChange","change","loading","React","Component","Character","stats","Card","style","width","Title","Body","Img","variant","src","avatar","localStorage","Object","keys","map","e","i","Boolean","match","key","charAt","toUpperCase","slice","Nav","Navbar","bg","expand","Brand","to","App","state","id","reponse","nom","age","submit","preventDefault","fetch","then","response","setState","json","setTimeout","setItem","document","querySelector","input","target","value","path","component","exact","render","setId","bind","handle","location","pathname","process","character","window","hostname","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7770e27a.chunk.js","sourcesContent":["import React from 'react';\n\n  /**\n   * Composant du formulaire\n   * Affiche un loader à la place du bouton lorsque la requête est en cours\n   */\n\nclass Form extends React.Component {\n\n  render() {\n    const button = (<button onClick={this.props.click} className=\"submit\">Toast</button>);\n    const loader = (<div className=\"load\"></div>);\n\n    return (\n      <div className=\"form\">\n        <form>\n          <input type=\"number\" min=\"1\" max=\"100\" className=\"id\" onChange={this.props.change} />\n          {this.props.loading ? loader : button}\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;","import React from 'react';\nimport {Card} from 'react-bootstrap';\n\n/**\n * Composant comprenant la fiche du personnage\n */\n\nclass Character extends React.Component {\n\n  /**\n   * Affiche les propriétée reçues par le parent, et sinon, celles stockées en local (si l'utilisateur recharge la page, il ne perd pas le résultat)\n   */\n\n  render() {\n    const {stats} = {...this.props};\n    return (\n      <div className=\"character\">\n        <Card style={{ width: '18rem' }}>\n          <Card.Title>Vous êtes désormais:</Card.Title>\n          <Card.Body>\n            <Card.Img variant=\"top\" src={stats.avatar || localStorage[\"avatar\"]} />\n              <ul>\n                {Object.keys(stats).map((e, i) =>\n                  !Boolean(e.match(/(id|type|avatar)/gi)) && (<li key = {i}>{`${e.charAt(0).toUpperCase() + e.slice(1)}: ${stats[e] || localStorage[e]}`}</li>)\n                  )}\n              </ul>\n          </Card.Body>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default Character;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Navbar} from 'react-bootstrap';\n\n/**\n * Composant du header (nav par abus de langage)\n * Ne fait rien de spécial\n */\n\nclass Nav extends React.Component {\n  render() {\n    return (\n      <Navbar className=\"head\" bg=\"light\" expand=\"lg\">\n        <Navbar.Brand><Link to=\"/\">Feed the Ram</Link></Navbar.Brand>\n      </Navbar>\n    )\n  }\n}\n\nexport default Nav;","import React from 'react';\nimport { HashRouter as Router, Route, Link} from \"react-router-dom\";\n\nimport '../utils/App.css';\n\nimport Form from './Form';\nimport Character from './Character';\nimport Nav from './Nav';\n\n  /**\n   * Composant principal de l'application, gère les event handlers\n   */\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      loading: false,\n      reponse: {\n        nom: '',\n        age: '',\n        avatar: ''\n      }\n    }\n  }\n\n  /**\n   * Récupère l'id saisi par le joueur et gère l'envoie de la requête à l'API.\n   * Le résultat est stocké en local pour garder une trace de la dernière fiche de personnage reçue.\n   * @param submit est l'event correspondant à l'envoie du formulaire\n   */\n\n  handle(submit) {\n    submit.preventDefault(); // empêche le rechargement de la page lors de l'envoie du formulaire\n\n    const id = this.state.id;\n    id >= 0 && id &&\n    \n    // requiert l'ajout de l'adresse dans le fichier host du dev\n    // 127.0.0.1  api.feedtheram.com:8000\n\n    fetch(`http://api.feedtheram.com:8000/Character/${id}`)\n      .then(response => {\n        this.setState({loading: true});\n        return response.json();\n      })\n      .then(response => {\n        setTimeout(() => {\n          \n          this.setState({reponse: response, loading: false});\n\n          localStorage.setItem(\"nom\", response[\"nom\"]);\n          localStorage.setItem(\"age\", response[\"age\"]);\n          localStorage.setItem(\"avatar\", `https://robohash.org/${response[\"nom\"]}`);\n\n          document.querySelector('#id').click();\n        }, 1500);\n      });\n  }\n\n  /**\n   * Met à jour l'id dans le state à mesure que la valeur du champ de saisie est modifiée par l'utilisateur\n   * @input est le champ de saisie\n   */\n\n  setId(input) {\n    this.setState({id: input.target.value});\n  }\n\n  /**\n   * Défini les routes des composants affichés, et transmet les méthodes et le state à ces derniers.\n   */\n\n  render() {\n    const reponse = this.state.reponse;\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" component={Nav} />\n\n          <Route exact path=\"/\" render={() => <Form\n            change={this.setId.bind(this)} // On fait un bind du contexte. Lorsque la méthode \"setId()\" sera executée dans le Form, le contexte (this) sera celui de App.\n            click={this.handle.bind(this)} // Ainsi, c'est dans le parent que sera modifié le state.\n            loading={this.state.loading} />} />\n          <Route exact path=\"/\" render={(location) => <Link id=\"id\" to={{ pathname: `${process.env.PUBLIC_URL}/${reponse.nom}/`, state: {character: reponse} }}/>} />\n        {/* Crée une route custom pour le personnage reçu */}\n\n          <Route exact path=\"/:Character/\" render={() => <Character\n            stats={reponse} />} /> {/* :Character est un placeholder pour le nom du personnage */}\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}